#1 CORRECTNESS AND THE LOOP INVARIANT
def insertion_sort(l):
    for i in range(1, len(l)):
        j = i-1
        key = l[i]
        while (j >= 0) and (l[j] > key):
           l[j+1] = l[j]
           j -= 1
        l[j+1] = key
m = int(input().strip())
ar = [int(i) for i in input().strip().split()]
insertion_sort(ar)
print(" ".join(map(str,ar)))

#2 COUNTING SORT 1 
import math
import os
import random
import re
import sys
def countingSort(arr):
    counting = [0] * 100
    for num in arr: 
        counting[num] += 1
    return counting 
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = int(input().strip())
    arr = list(map(int, input().rstrip().split()))
    result = countingSort(arr)
    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')
    fptr.close()
m = int(input().strip())
ar = [int(i) for i in input().strip().split()]
insertion_sort(ar)
print(" ".join(map(str,ar)))

#3 QUICKSORT 1 - PARTITION 
import math
import os
import random
import re
import sys
def quickSort(arr):
    left = []
    equal = []
    right = []
    pivot = arr[0]   
    for el in arr:
        if el < pivot:
            left.append(el)
        elif el == pivot:
            equal.append(el)
        elif el > pivot:
            right.append(el)         
    return left + equal + right 
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = int(input().strip())
    arr = list(map(int, input().rstrip().split()))
    result = quickSort(arr)
    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')
    fptr.close()

#4 INSERTION SORT PART 2
import math
import os
import random
import re
import sys
def insertionSort2(n, arr):
    # Write your code here
    for j in range(1, n):
        key = arr[j]
        i = j
        while i > 0 and arr[i-1] > key:
            arr[i] = arr[i-1]
            i -=1
        arr[i] = key
        print(*arr)
if __name__ == '__main__':
    n = int(input().strip())
    arr = list(map(int, input().rstrip().split()))
    insertionSort2(n, arr)

#5 BIG SORTING
import math
import os
import random
import re
import sys
def bigSorting(unsorted):
    # Write your code here
    unsorted = list(map(int ,  unsorted))
    unsorted.sort()
    unsorted = list(map(str , unsorted))
    return unsorted
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = int(input().strip())
    unsorted = []
    for _ in range(n):
        unsorted_item = input()
        unsorted.append(unsorted_item)
    result = bigSorting(unsorted)
    fptr.write('\n'.join(result))
    fptr.write('\n')
    fptr.close()

#6 INSERTION SORT PART 1 
import math
import os
import random
import re
import sys
def insertionSort1(n, arr):
    # Write your code here
    key = arr[-1]
    i = n-1
    while i > 0 and arr[i-1] > key:
        arr[i] = arr [i-1]
        print(*arr)
        i -= 1
    arr[i] = key
    print(*arr)
if __name__ == '__main__':
    n = int(input().strip())
    arr = list(map(int, input().rstrip().split()))
    insertionSort1(n, arr)

#7 RUNNING TIME OF ALGORITHMS
import math
import os
import random
import re
import sys
def runningTime(arr):
    # Write your code here
    shifts = 0
    for j in range(1 , len(arr)):
        key = arr[j]
        i = j
        while i > 0 and arr[i-1] > key:
            arr[i] = arr[i-1]
            shifts += 1
            i -= 1
        arr[i] = key
    return shifts
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = int(input().strip())
    arr = list(map(int, input().rstrip().split()))
    result = runningTime(arr)
    fptr.write(str(result) + '\n')
    fptr.close()

#8 COUNTING SORT 2
import math
import os
import random
import re
import sys
def countingSort(arr):
    # Write your code here
    count = [0] * (max(arr)+ 1)
    for num  in arr:
        count[num] += 1
    sortarr = []
    for i in range(len(count)):
        while count[i] != 0:
            count[i] -= 1 
            sortarr.append(i)
    return sortarr 
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = int(input().strip())
    arr = list(map(int, input().rstrip().split()))
    result = countingSort(arr)
    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')
    fptr.close()

#9 CLOSEST NUMBERS
import math
import os
import random
import re
import sys
def closestNumbers(arr):
    pairs = []
    mindiff = 999999999999
    arr.sort()
    for i in range( 1 , len(arr)):
        d = abs (arr[i - 1] - arr[i] )
        if d< mindiff : 
            mindiff = d
            pairs = [arr[i -1 ], arr [i]]
        elif d == mindiff:
            pairs.extend([arr[i-1], arr[i]])
    return pairs 
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = int(input().strip())
    arr = list(map(int, input().rstrip().split()))
    result = closestNumbers(arr)
    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')
    fptr.close()

#10 FIND THE MEDIAN
import math
import os
import random
import re
import sys
def findMedian(arr):
    arr.sort()
    return arr[n//2]
if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')
    n = int(input().strip())
    arr = list(map(int, input().rstrip().split()))
    result = findMedian(arr)
    fptr.write(str(result) + '\n')
    fptr.close()
