#1  TRAN   transitions and trasvertions
f = open("C:\\Users\\ASUS\\OneDrive\\Desktop\\Hacker\\rosalind_tran (1).txt", "r")
mat = []
str1 = f.read()
str1 = str1.replace("Rosalind_", "")
str1 = str1.replace("\n", "")
str1 = ''.join([i for i in str1 if not i.isdigit()])
mat = str1.split(">")
mat.remove("")

def tAndT(s1, s2):
    t1 = 0
    t2 = 0

    for i in range(0, len(s1)):
        if (s1[i] != s2[i]):
            if (s1[i] == 'A' and s2[i] == 'G'):
                t1 = t1 + 1
            elif (s1[i] == 'G' and s2[i] == 'A'):
                t1 = t1 + 1
            elif (s1[i] == 'C' and s2[i] == 'T'):
                t1 = t1 + 1
            elif (s1[i] == 'T' and s2[i] == 'C'):
                t1 = t1 + 1
            else:
                t2 = t2 + 1
    return t1 / t2

s1, s2 = mat
print(tAndT(s1, s2))



#2 SSEQ  find a spliced motif
def find_motif(data, motif):
    position, indices = -1, ''
    for nucleotide in motif:
        position = data.find(nucleotide, position+1)
        indices += str(position+1) + ' '
    print(indices)


with open('C:\\Users\\ASUS\\OneDrive\\Desktop\\Hacker\\rosalind_sseq.txt', 'r') as file:
    content = file.read()
DNAs_number, lines, line_number, DNAs = content.count('>'), content.splitlines(), 0, []
for i in range(DNAs_number):
    DNA = ''
    line_number += 1
    while lines[line_number][0] != '>':
        DNA += lines[line_number]
        line_number += 1
        if line_number+1 > len(lines):
            break
    DNAs.append(DNA)

find_motif(DNAs[0], DNAs[1])


#3 LONG  Genome Assembly as Shortest Superstring
f = open("C:\\Users\\ASUS\\OneDrive\\Desktop\\Hacker\\rosalind_long.txt", "r")
mat = []
str1 = f.read()
str1 = str1.replace("Rosalind_", "")
str1 = str1.replace("\n", "")
str1 = ''.join([i for i in str1 if not i.isdigit()])
mat = str1.split(">")
mat.remove("")

def long(mat, bbb=''):
    if (len(mat) == 0):
        return bbb

    elif (len(bbb) == 0):
        bbb = mat.pop(0)
        return long(mat, bbb)

    else:
        for i in range(len(mat)):
            a = mat[i]
            for j in range(len(a) // 2):
                c = len(a) - j
                if bbb.startswith(a[j:]):
                    mat.pop(i)
                    return long(mat, a[:j] + bbb)
                if bbb.endswith(a[:c]):
                    mat.pop(i)
                    return long(mat, bbb + a[c:])
print(long(mat))


#4 TREE completing a tree
def complete_tree(nodes, adjacency_list):
   
    existing_edges = []

    for edge in adjacency_list:
        existing_edges.append(edge)

    extra_edges = (nodes - 1) - len(existing_edges)

    return extra_edges

with open('C:\\Users\\ASUS\\OneDrive\\Desktop\\Hacker\\rosalind_tree.txt', 'r') as myfile:
    lines = myfile.read().splitlines()
    n = int(lines[0])
    edges = lines[1:]

print(complete_tree(n, edges))


#5 PPER  partial permutations
def pcalculator(a, b):
 
    partial_perm = 1

    for i in range(b):
        partial_perm *= (a - i)

    total = partial_perm % 1000000

    return total


print(pcalculator(87, 10))


# 6 ORF  open reading frame
def revcomp(s):
	com= {'A':'T', 'C':'G', 'G':'C', 'T':'A'}
	result= ''
	for i in s:
		result += com[i]
	return result[::-1]

dna = "GGAACACATTCGAGGACGACTATCATGATCTAAGATCACATACAGGCGAATGGAAGAAAGTGGGATTCCTAACTTCACACTTTCTGTCCAATCTAGACACTAGCGCAGGATCTATGCGGGATTGTGCAGGCAGGCCCCCATCTGGCAGTACGGTGAAAGCTATACCATCGCTTCTGTTTAGGCATCATGTCGGAACGGACGGCTCACCGCTGACGCTCGGGGCCAACTATGCGTCATCGCAGTATTCATATCCATCAAAACTATCAGCCCTTACCTTTGGCGCAACGTGTCATCGCAAAGCCCTCGTCAGTATATCACTCCTGGCCAGAGTCTAACTGATACTCCACCAACTGCGCACGCGAAAATATCCGATAGGTGCTGATTGGTGTAGCAAAGAGCAGGCTTCTAACTTCATGACGCAAATACACGACAAAAAGATTGCCCCAATGCTGTTCTTTGTAGCTCGTGCCAGTGTCGCGTAGCTACGCGACACTGGCACGAGCTACAAAGAACAGCATGCGAGATCTGTTTTACTTGAGAGAGTTCTAGGAGTCCCACCGCACTCTGCCCATGAAGTCTCGCCCCTTTATCAAATGCGTACATCACGAGTGGTTCCTCAGTGCGTAAGAGCTGAACAGAGAGGTGGGTGGTAAGGTCGCTGGCCTTACCCTTGCTGGGCTGTCCTATCTTCCCGCCGGCCAAGAACAGTACGCATGGGGTCTGGTTGTGTGGAATAAGCTAGCTTAACAACAACCTAATACGACTGTCGCCGCTTGCGTGCTCCCTTAAGTAGAGTCTCGCGTTATTGCCCAGACCCTGTGAGTCTGATGCATCTGTACCAAAGGAGGAGCGTTGGTGCAGATAGAGTCGAAAACCAAGGTTACACAATGGCCTACATAATGCAATGTAACAGTGTTAATTGGTAATTACCGCTCTTATAACCAATTAGGTAGACGGCGTTATG"

table = """TTT F      CTT L      ATT I      GTT V
TTC F      CTC L      ATC I      GTC V
TTA L      CTA L      ATA I      GTA V
TTG L      CTG L      ATG M      GTG V
TCT S      CCT P      ACT T      GCT A
TCC S      CCC P      ACC T      GCC A
TCA S      CCA P      ACA T      GCA A
TCG S      CCG P      ACG T      GCG A
TAT Y      CAT H      AAT N      GAT D
TAC Y      CAC H      AAC N      GAC D
TAA Stop   CAA Q      AAA K      GAA E
TAG Stop   CAG Q      AAG K      GAG E
TGT C      CGT R      AGT S      GGT G
TGC C      CGC R      AGC S      GGC G
TGA Stop   CGA R      AGA R      GGA G
TGG W      CGG R      AGG R      GGG G"""
table = dict(zip(table.split()[::2],table.split()[1::2]))

stop = ["TAA","TAG","TGA"]
proteins = []
for s in [dna,revcomp(dna)]:
    for i in range(len(s)):
        if s[i:i+3] == "ATG":
            for j in range(i,len(s),3):
                if s[j:j+3] in stop:
                    c = [s[k:k+3] for k in range(i,j,3)]
                    proteins.append( ''.join(map(lambda x:table[x],c)) )
                    break

for seq in set(proteins):
    print (seq)

#7 SPLC  RNA splicing
rna_to_aminoacid_dictionary =  {'UUU' : 'F', "UUC": 'F', 'UUA' : 'L', 'UUG' : 'L', 'UCU' : 'S' , 'UCA' :'S', 'UCC' : 'S', 'UCG' : 'S', 'UAU' : 'Y', 'UAC': 'Y', 'UAA': 'STOP' , 'UAG': 'STOP', 'UGU' : 'C', 'UGC': 'C', 'UGA' : 'STOP', 'UGG': 'W', 'CUU' : 'L', 'CUC' : 'L', 'CUA': 'L', 'CUG': 'L', 'CCU': 'P', 'CCC' : 'P', 'CCA' : 'P', 'CCG' : 'P', 'CAU' : 'H', 'CAC':'H', 'CAA':'Q','CAG':'Q','CGU': 'R','CGC':'R','CGA':'R','CGG':'R','AUU':'I','AUC':'I','AUA':'I','AUG':'M','ACU':'T','ACC':'T','ACA':'T','ACG':'T','AAU':'N','AAC':'N','AAA':'K','AAG':'K','AGU':'S','AGC':'S','AGA':'R','AGG':'R','GUU':'V','GUC':'V','GUA':'V','GUG':'V','GCU':'A','GCC':'A','GCA':'A','GCG':'A','GAU':'D','GAC':'D','GAA':'E','GAG':'E','GGU':'G','GGC':'G','GGA':'G','GGG':'G'}

file = open("C:\\Users\\ASUS\\OneDrive\\Desktop\\Hacker\\rosalind_splc (1).txt", "r")

def extract_sequence_from_input(file):
    sequences = []
    result = ""       
  
    for line in file:
        
        if ">" in line:
            sequences.append(result)
            result = ""
      
        else:
            
            if "\n" in line:
                result += line[:len(line) - 1]
            else:
                result += line
   
    sequences.append(result)
  
    sequences.remove('')
    return sequences

sequences = extract_sequence_from_input(file)

dna_string = sequences[0]

introns = sequences[1:]

introns.sort(reverse = True)

for intron in introns:
    dna_string = dna_string.replace(intron,"")
dna_string = dna_string.replace("T","U")

for i in range(0, len(dna_string) - 3, 3):
    print(rna_to_aminoacid_dictionary[dna_string[i: i +3]],end='')



#8 GRPH  overlap graphs
with open("C:\\Users\\ASUS\\OneDrive\\Desktop\\Hacker\\rosalind_grph (3).txt", "r") as f:
    s = f.read().replace('\n', '').split('>')[1::]
    # print(s)
    d = {}
    for i in s:
        d.setdefault(i[:13:], i[13::])
    print(d)
    se = set()
    for i in d.keys():
        for j in d.keys():
            if i != j:
                k1, k2 = d[i][:3:], d[j][len(d[j])-3:len(d[j]):]
                if k1 == k2:
                    se.add(j + ' ' + i)
                # print(i, j)
                # print(i, k1, j, k2)
    for i in se:
        print(i)
        


#9 PMCH Perfect Matchings and RNA Secondary Structures
import math
RNA = """ACAGCUUACUUACUUAGGCACUCGUGGAACUACCGCGUAAGAUUUUAGCACGAUCGAGUG
GGCCCCCAGGGCGGUCAU
 """
AU = RNA.count("A")
GC = RNA.count("G")

matchings = math.factorial(AU) * math.factorial(GC)
print(matchings)
