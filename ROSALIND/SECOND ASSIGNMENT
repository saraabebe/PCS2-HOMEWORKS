
#ROSALIND ASSIGNMENT 2
# 1 COUNTING DNA
def countNucFrequency (seq) :
   tmpFreqDict = {'A' : 0, 'C' : 0, 'G' : 0, 'T': 0}
   for nuc in seq:
      tmpFreqDict[nuc] += 1
   return tmpFreqDict

DNAstring = 'TTTGGGTGCGCAAAATCACTCTGCGCCGTTCACCAAAAATGCGCGCGGGGAATAATGGCGGTAAGTTCATGTGTAGAGTCAGATCAACGGCTGATCGGCTCCAAGTGAAGATCGGCCATTGTGGAACTGCACACGCTCAAAAGGATAGAGAGCCCCATGGGACTATTACAATTTAGAGGGCGGAATTGTCATAAGTTAAAAGTGTTATAAACACCATGAAGGTTGACGGAGGCTATATCCAGCCGCCACACGTTTACGAGGGTTCCAAGAACCCGAACTTGAACGACGAGGGATGGCTCGGACCTAAGCTAAAAAAGACTACTGCTGGCCCCGACAGATCACTGATGGACGAGGACCCGATTTCTGGTGTTTTAGACACCCGCCAACTCATCCCATTACTAGTAGTATGTCGTAAATATGAACTGTAATTAACTTATGCGATACGGTTATTCGGTGAAACTTATGGCTGGCCCATAATTACTATAAGCCTGCGGCTCAATGAGGCCACCCCATTTTGGCCGTTGCCGCCTGGACTGATTGGGCAACTATCAGCTGGTCCTGATACCACACCGGGGATCACGGAGAATACAATATAGTACCCTTGGGTCAAGGTTGTTCATGGTCAAACTTGAAGCCGGCATCACGACAGGCTAAGGTTCCTAGATACCGTCTCCACCAGTGGCTGGGTCTGCGACAACTCCCCATGAATTCATGTGGGCCGCGTAGGCCGGATTTAAGTTCCCAGTACCACCATTGCCTATATAAGCTAGTTAAATGCTGCCACTCTATTTTGCCTAACTCCAAGCCCTGAGAAAGATTGGCGGCCAGTCAAACGAACGGCGATCCCCACCGCCTTAACGAGTGTAGGGAACCATACCAGCCCGGAGACAGTCCACCGAGCAAGATGCGGGGACAGGGAGAATCTTAAAACATTTTAACGAAGAAGATCGCCCGGCGGTCAAACTCTAAGGCCT'
result = countNucFrequency(DNAstring)
print(' '.join([str(val)for key , val in result.items()]))


# 2 Transcribing DNA into RNA
def rnatranscription(dna):
	return dna.replace('T', 'U')
print (rnatranscription('GCATAATCATGGAGCTACATAGAAACCCAGAATCATGACACTCGCACAATCTACTCGTGTTGGACCCTAATTGTTTGCGATGAACCTACGGCATATCCTTCGCTACCGCCGGTGTGATATTGCATTCCGTGTGTGAACCTATAATGAGATTGTTCATGCCTGAACGACTAGAAGCGGCTGTTTTAAACTAAACCAATACAGTGGAAGCAAAACCGCTCACTCCGTGGCAGAAGAACATTCTGCATTACTTTTGTTAATGTGTTTGAAGGGCTGCCCATTTTGTGTCTTTGACGAAATGTAGCTTCTGTATGGTATCCCACCCATTGGAATGAGGCTGATCCTGTACTACAATGCGTCAATGTTCAGGTAATCAATACATGGGTCATCTATTCAATTTGATCCCTGCAAATTAGGCCAAAATACCACCAAGTATGTTGCGCACCCATAACGGGACTTTATCCATCTGATCCGCTGTCACTACCGTCTGCCCTAGCCTTACTCGAAATAAATTTTCTGGGCCTGGCCCGGAGTCCAGCGACTGACAGCTAATATCTACGGGCATGAATGATGAGCTTCGGACGTAAATCCTTGGCGCACCGCGTTGGTGACTCCTAGGCAATGATGACAGCCCTGTCTAGCAACCAGTGGTCGCAGGCCAACAGGAGGTAGTGCTGGGGCGTATTGGTGAAGTGGCTGGAACCGTTGATAGATCCCTTGGGCTTCAGCATTAGGTACACGCCTAAGCCTACCCACCATCGGTCGCACCTATTCGATATCAGCCACTGCCCTTTGCCGTCGGGACTTTCGCTGATCCGTTCAGAATATATTTGTTCTAACACGTCCTACTGTCGCGTGTGTATAGCAGATAGTGCAGCGCGCAGCACTTGGTTGATTGTTTACCTCAGAGGTGTCTAAGCAGCACAGGTGATTGGCAGTCGCCGTCCTGATTGTT'))



# 3 Complementing a Strand of DNA 
def reversecomp(dna):
  reversedna = dna[::-1]
  complement = reversedna.replace('A','t').replace('T','a').replace('G','c').replace('C','g').upper()
  return complement
print (reversecomp('AGACCCCGAGATTGTCAGTATTATGTCTAACAGTGACGGAGTCCGCAGGTCTTCGATTTGCGTTCGCACGACTGGATCCCGAAGAGTCGGTATCTACGCACGCTTACTATGCGCCAGCGAGTTGTGGCTCCGGCATATAAAGCCTGTCTCAGGACCTAGCTTTAAAATTTTGTTACTCCACGATAATCCGGAAGTGCTGTCGGAAACCGGGACTGGATCAAGCAAAAGCCCAGATGCGCATTGGGCGTATTCCCACTGCTTCTGAGCTACGGTATGTTCCTACTCCGTGGAAGGTTTTGCATAATGAAGTGGCTCTGCGAGCTTACAGAATGTACATCTTGCAGAACTAGAGGGTCGCTCGTGACCAGACTCTAAACAATGGGCATTACGTGGCATCTCCCATGTGGCATAGCCGCTCGGGCTTTACTAGCAATCTACTACGCCGAACCAAGGGTGGTAAGCTTTACGTTCTAGGTACCCCAAATTCGTCGACAGACGTAGGAATTGTAGACGAAGCGCCCTTTCATTGCGATTGCGATAATTATCCCATTAGACCTTTCTAAAGCTCCCGTACAAGCCGCTGTACTTCAGTCTGCAAGCGGTTTCCTGAATGGCCAAAATCCATAGGCTTATTTGTCTTTTATCCGTAACGGTCAAGGGACCGTCCCCCGGGCCAGACAGTCCCTTTATTCCGAGCGATTCATTGCTCGCATCGATCTTCAAGGCGTGGTCCCGGACTCCACATATCTCGAGTGTGAACTGATCCAGAGCCGAGTACACACAATGTCGACACCTCTGTTGTGCTAGATTACCAGGGGCACGTTGGACAGTGTGAAACGCCGGACGGACATAAAGGATAAGCCCGGTGCTATCATATGTTGTTC')) 


# 4 Mendel's first law
from enum import Enum
class Allele(Enum):
    DOMINANT = 1,
    RECESSIVE = 2,
    HET = 3


def mate(x,y):
    if x == Allele.DOMINANT and y == Allele.DOMINANT:
        return [Allele.DOMINANT]*4
    if x == Allele.RECESSIVE and y == Allele.RECESSIVE:
        return [Allele.RECESSIVE]*4
    if x == Allele.HET and y == Allele.HET:
        return [Allele.DOMINANT, Allele.HET, Allele.HET, Allele.RECESSIVE]
    if x == Allele.HET:
        return [Allele.HET, Allele.HET, y, y]
    if y == Allele.HET:
        return [Allele.HET, Allele.HET, x, x]
    else:#DOMINANT AND RECISSIVE
        return [Allele.HET]*4


def get_pairs(organisms):
    if len(organisms) < 2:
        return list()
    first = organisms[0]
    pairs = [(first, organisms[second_index]) for second_index in range(1, len(organisms))]
    other_pairs = get_pairs(organisms[1:])
    pairs.extend(other_pairs)
    return pairs

def f(k,m,n):
    organisms = list()
    for i in range(k):
        organisms.append(Allele.DOMINANT)
    for i in range(m):
        organisms.append(Allele.HET)
    for i in range(n):
        organisms.append(Allele.RECESSIVE)
    pairs = get_pairs(organisms)
    children_list = [mate(*p) for p in pairs]
    children = [child for sublist in children_list for child in sublist]
    count_children = len(children)
    count_dominant_presence = 0
    for child in children:
        if child is not Allele.RECESSIVE:
            count_dominant_presence += 1

    return count_dominant_presence/count_children

k = 21
m = 28
n = 25
print(f(k,m,n))



# 5 Computing gc content 
fasta = '''>Rosalind_3475
TACAACCTTCAACTCACCAAGATTGCGACAAAACGACGCAACATAGATCACTACTATCCT
AAACACCTAGCAAGATTGGAACGCTGGTTTAAATCGCCACCTTCCGCCTAAACTTGTGAC
AGTCGATGGTTCCCCTTTAATACACTAATATGGCCAATGACTGCCGAGGCTGTCGAAAAT
TTATATTCCCTCCCACCGCTGATAATGGACTAAGGTACCAGCCCCCAGGTAATTGCCAGG
TTGTCGATACAAAAACCAACCGAAGGGTTACGACTGAAACAAGGGTACTCACGTTACACA
TATCCGAACCAATCTGGGTAGCTTTGCCCCGATAGTTTCAATTGAGAGGTACAGCTTTGT
CGTGGAGCCGCTTCAGGAGTAGCGACTAGAATCCAGAGTACTTGGCCTGTGTCCATGTGT
ATGTCACGAGCCACGGGACGCGCACCCTTATTACAACTGCCGCATTCCCAACCTTTAGTG
AAAGCTAGCCCAGATTTTTGTACTCGTTTGCGGGACGCAAGACGGATAAATTGAGGCCCT
TGTATGCTCCCCTTGATTAAGGACTACTGCGCCAATCTCGCGACGTTATCACCAAATAAG
CTAGCCCATGTTGCTTTTCGCTTCCAGTCCGTTGCAGATTACAGAGTTTCACGCTACATA
ACTAAACTGTTGGACGCATGAATTTAGTAGTTGTCAGCAAGGACCATAAATTACGGCTAA
GTAGAAATGACATGCTTTGCAGAGGCCGATACTACACACCTTCTGAGGCATTCCGTATTT
TATCTGATTACCCCGGAGCCTGTAA
>Rosalind_2163
AAAAGTACACTTCTAGTTTTCGGATCAGGGTTAGCGCAAGTGTTCTGTTTTCCTGTAGCG
AGCCCAAGTCGTGCATCCATATTTCTAAAAACCACAAGGGTGTGTATCCGCAGAATCCCT
AAGGCTTGTGCTCGATCATAGTTACTATAAACGTCCATGCCAGCAGTTGACGAGACGAAT
TTATCCCGAGGATCACGCGCACGGAGTCGCGAAGTTCGCAACACGACGCATATTATCGTC
AGTGGTACAATTAGGACTCAGTGCATGTGCTCTCCGGACACAACATTCCAACCGCCTGGT
CAAGAATACTTCTCAACGGTTGTGACTGGCTCATTCGAAGCGTGTGTCTGCGCGCGAAGA
GCTCTCTAGGGTGAAGTTCAAAGCGTATTCTGTAATATTCCCAGCACCATATCTTCTACT
GTTATTCGTTAAGCCTCGTATGGAGGAGTTAGGCTCCCGTTAAGCTCGTTTTATATGGAT
CCTTATCTTATGGCTGGCCATGGCTGATCCGGCTCAGACAATGGAGGTAACGCTGAAATG
AACCCTCCCAACGCATTAGTAGCCACAAGTACTGGGTCATCTCACGTGAAAGACCACCAC
GCGTTAGGGCGCAGCTACATCCTTTAAGCCTGGGGAACTTGCGAAGCGACCAAGATGAAT
TACACCTTGATCCGCGGCTCTAGTTGTCGACGCTCAGATACACTATTACAACCTACTAAA
CGCCCCGGAAGCCTCCTCACTGTATAGGCTTACTGAGCACGGGACGCAACAGATACGGTG
GTAAAATTATGATAATGACCGCCCGACAATCCGGCTGACAACCTATCGAATTGTCCGGAT
GCTCGCCCACCTCTTTGTAAACTCTAGGATATGCTTGGCGGATGGGCCGACCACCTCC
>Rosalind_9981
CACCGACCCCGAGATCGTGCTACGTGCAAAGATTCCAAGCTTTCCCTTAAGCCAGAATGT
GTGTATTCATTTGACCGGAGCGAACTTCTGCGGCGTGGCGGTGCAAACAACAGTCGAGAT
TCAGAGTAATCCCATTGCTACAGGACGCGTATCGCTAGTGCTGATGCCCCTGAATTGAAC
AGCGTGAGTGCAGTGCGCGTGGTGTTTTACGTGGACAGGGTTCCGGATGAGCGGGCAAGG
GCCAGATGCATACTAGTGTAGAATTTCAATTTGTTGGAAGCGGAAAACTTGCGCTTCATT
CCCCGCGCGAGTACCGAGTACATGGTTTTATGTATCCACGCACTAGGGTTAGGGCCCCTG
ATAGGAAGGCAGTGAGTCGTCTCATTTACGTCTAGCATTTCCGTCCTGGAGTCCTCCAAT
GGTAACACACCCTAACTCCAACGGAAGTCGGCTTGCTCCTGGAGGTCTATCTCTGTAGAG
TAGTTTGGGGTGGGGTGCTAGTCTCTCAACTTCGGTATCAGTCGCGCACGTATTTAGGTC
CCCATTTATGCTCAGCGCGCTATCCTTAGCCATGTCGCATTTGGCTCAAAGAGCTACTCA
CGAGCCGACAGCGAGAGTGGACTAGTTGAATCTGATAGTCTCCAGAGGACTTGAATGCGA
CGGCAAAAGCGATGCCCTCCGGGTGGTTCTTTCCGGTGGGATGTTGCCTAGTCGGTGGGT
CCGCACATCATGGAGTCCGGCAGAGCCTTATCTAGCACCCATAAGTGGGGCCTACGTAGT
ATCCGACCGCGTGTCGTGCACGCACTCATGTCAAG
>Rosalind_2133
TGCTTATTTGACTAGTTTCTGACACTAGGCCTAACGACTTACGTAAGCAATCTGCGCATG
GCTTGTGTTACGCGGAAGCGACGACCACACAGCGGATAAGAAAGACGGGGCAATCACGTG
CTACAAGCTTGGCTAGGCCAGGCTTGGCGTCTGTCCTAAGCAATTGGTAGCCTTGAGTAG
GATCCCCGGGCTGTTGACGTAACAGTAGCCTATGCGCTTTGGGGTAACTCGTCTACGGGG
GGCGCTAGCTCGGCACGAACTCATATCTTTGATCCCACTTGTTCTTATTACTACTGTTTT
GGTTTCGAAGATAGGGCACGGAGTACTTGCATTAAGACAGTGTCATCATGAGCCAAAACT
GCCGAAAATACCATGACTAGCATTGTTTCAGGTCGGGTTCTGCCCCGGGCCACTATTTTG
CAGTCCCACATCCTACTCACGTGGAATCGATTGCCGTCTTATGAATATATATTGCCCATT
ATTTTGCGTCCCCTTCATGGTCCCTGCATTATGCTCACGGCATTCTAGAAGCGGGACTGG
GCTGTGTAAAGATATCACAGATCTTATGCCTGGCATACCCCCATGAACGGAGACGATACC
ATAACATAGGATGATCTGCGGGTTCACGAGCATTCACTGTTGGTATCCATTTGTTTTTAT
GATTATGTATTTTGAGACTCACTACTTCCTAAGCTCCGTATCGCCAAACTGTTACTCACT
CCACCTTCATAACGAGTCCGGACTCACCCCCCGAGGGGTCCAGTAGGATCCTTCTACCGG
AATTCTAGTCTTGAACCACCAAAATGCGCTCGGTGATCGAGTATATTCTTTACAACGGCA
CAACATACCTTTTTTGTAGAAGGTCGAACGACATGGACACTTGTCTGAACGTTTTACGTT
TCCAGTGAACCCCACCAAATTGTAATCAGTCGCTG
>Rosalind_8222
CCTGTGAATGAAGACTAGCTGGCCTACAGGGCAGACTAGATTAATTATCGGCGGCAGGAC
CACCTAGAAATGCAGATGCGTAGCAATGTAAGAGCCTTTGATCTTAATGCGCGCCCGTCC
GATTTGTCATACGCAAGACGTCGTTCCCTGTTTTCTTCGCTCGAAACCTAACCTCGGAGT
TTCGAGTAGCCAACGTTATATGGATACGTACAAGTAACCTGATAGGGCTCTCAAATTATC
ACAGCGAATGTGTCACTACGCGCAGGCTTCGGTGTCCTAAGCCAGGTGGCGTCAGAGAAA
TCAAAGGCCTGCCCAATGACTCGGGAACGTGCCCAAAAAGGTTCGTTGAAAGCGACTGCG
TGACAACTGTTCCTTCGTGTGGGAGAAAATCGGCGACCCGAATCAGCTAGTATCGCACAC
CATGGACCATTAGAGCAACCTGAAATAATATGGTCAGCTAACAATCGTCCCTTACGTTAG
GGCGTTCGTCCATAAGATCATCGCTTGCGACCCTACCCCGCTGTACCAAACAGGGCAGGC
GATTCCTGGGTCAGACATCGAGTGCCGTCATAGGACCCAGGGCAGGAAGAAGCGCTGAGA
TCATGCCCGACGGTAATACGAACTTTTTCGAATTACGTGATCAGTCTTCCCCGAAGACTT
GACCGTCACAGTATCTCCGAAAGTCTGACTGAAACGGATACATCCCTACGGGACAACGCT
TATACGAGACGCATGCGCTTCTGTTGTTGCTTGCCGTATGTAATGGGACCGGTTCTATTG
GGTCTTGATACAGCAATAGGCTGGGACACTATACGTCCTCGTTCCGTTTAAGTAGCTACA
GAAATCTATAAGTAGCAGGGTAAAAAAGTACAGCCGTGCAAAATGCCTTGCAACGAGCGT
CTGGCGCCCGCAATGAAAGAGACTCGTTCTGTGTT
>Rosalind_5916
CGTTAAGGAGGAGATTGAGGACTCAGATTGGATCGCGGGACGCCTAACCTGTACCCGCTC
CGCACAATTTTATAGTAAAGCTTCGGCGAGAGAGAAGAGAGACTAGCGATCTATTGACGT
GTTCGCACCGGAGTGGGTCTTCAGAGCACTGTCGGTTACAATGGCAGTCCAACCGTATTT
CAGTTAATCCGTGTTTCGCTACTCTTGGAAACGAGCAAGACATCCATGCCTTTTAAGTCG
CGAGCTCGGTCTTGTTGGGAGCGTGAATCGATATGACCGGTGAATCTTCGTCGCAAGATC
AAACGGTGCCGGGCACATACGTATGGCCAGCCATGGCCCAGCAAGTAAGTCGCCTACGCC
TCCTGAAGCGTCATAAGGATAAGGCGTATTTTACTTGCACGCCTGAGATGAGACTAACAG
TCCGATTACAATGGGACCCCTTTACGAATCGGGAGCCCATACTCAAAGTTACGGGTGAGT
AATACGTTGTGCGGCTACAAGGATCCACCGAAGATCCCACAGTATATTGACGCGGGGATT
ACCGGGGCATTAGGGCTATACGCTTGGGTAGCCTATCGCCGTGTCGCAGAAAGGTTATCT
CTCTATTGACAGCTTACCGAGCTAATACGCAAGTCTCATAACTTGGTATTTGAAGCCTCT
AGTATCGATTGCAAGTGCGTACTTAGTAGGAGGCCTCACATGTCAATCCTTGCTGTTCGT
CGCTCCTAAGTACAAGGCCTGCCTCGTGTAATTCGCAAGCAATGCTGGGCTGGTGGTCAG
GTTAAAAGACGCTCTTTAACTATGCTGTCATGCTTTGTCGCGGTTGACCTCGCCCCCGGC
GCGCCCCTACCTATCCATGCTCGTCGTGTCGTTACAAGGCAATAAAGATACCAGCATCGC
CGTCGTCACACCATAGAGGCTAGCAACCTCGGAACGTGAAGTATGAGATCGCTGGATTTC
ATCTTGGACCCATCGGTAACGCCACCGGTATC
>Rosalind_3399
CCCCCGAAGGCAAGGCGAAGAAGGTGAAATCATATGTAAAAGGGCGAAGTGCCACGGTAG
GTAGGTGGATTGTGACCACTCTTCATCTTTTTCAAGGGTCCGATTGAGGCGAGTCGTTCC
ACATAGCACACTAGTGCGGCAGTCTCTGTATACCGGACGCTGATGCTGAAATGTGCTCCC
TTTAAGCAAACAAACCAAAACAGGGCCGTTGGCTCCGAGCCACAGTGAGACAAGTTGATC
AATCATGTGCGCGTTTATGGTCGCTAATTAGCCTTGTCCATTTTGCGGGTGTTCGACGAG
CCTGCCATATTGGCGCTCTTGGTTGCAGTTAAGTCATTTTAGCATGAACCCTCATAGCAC
CTAGGCGAGAGCTATAGCTCTATACCTCCGGCCGAAAATGGTAACCGGTGCGTTGGTGAG
CACTTATAAGCGATATATCACATTTAGAGGATGACATGTCATAAGGATATTGCGTTACCA
CACGTGGATCACTTGCGCACGCACGGTGCTACTAACCCCAAGACCGGCATAGATCCCGTT
GACCACCCATGTGTCGACGAAAAAAGCTTATTTACGTTATGAGGCTTTGGTTAGCAGTCA
TATCGCACTGAAGACGCATTGCTTGTCTCTGTGCAGAAATGCGGTGACGTTAGAGGCTCA
TCCGGCGATCGGACTTGTTTGGGTTAGGCCCCCGGGTACTGCCGCTAAGAGAGCCAGCCT
CCATACTCACCCTTATTGCTAAGCATCATTCGGCTGGTACGGACTTTGATGGAGTTCCCT
CCTGAAGGCACCCTTAAGCTCCCCTCCG
>Rosalind_7991
TTGCTAAAGAACAATCAGGACTTGTGGGCTCGAAATATCCCTCCTGACATTTAAATGGTT
ATGGAGTCATCCAGACGCGGTCTCGTGACAGTAGGCGCGGGGTATGGTAATAATGTATCC
CAAATGCTCACGTAAGTGCCAATCAACCGCTTGTAACTGACACTGTTAGTAGATGGTGGT
TGGCTCGCAGCTCAAGCTCATCAAGCTCCTAGCAGTGCTCTCACACGAGTCCCTTTAGAT
TTAGAGGTAACAACCTCCACTGGGCAGAGATGAATCTAATACCCGTCTTAACGCACCCTA
GCGCAAATACAGTAAGGGGACAACAAGTAAATAAACGCCCCAATTACCCTATGCTCCTTA
GTGACGTGAAGACACTACGAGGTCATACGGCAGTTACAAATGTGGGCGGACCAACCTACC
GCTGTCATCTTCAGCTGGTGCGAAAATTTGCCTATAGGCCAAGCAGAACCTTTTGCATCA
CCACCCCTGGGTGTGACTTGCCACGCAGAGCTCGAGTAAGATTTCAAAGGCGTTAGCTCC
AGCTATGGCTAGGGTGTAAGCCACCTCCGACACCGCAAGCGTCTGCGAGTTCACAACGAA
ATCGGGCTGCGGAGTTTTCTATATAAACGCCATACAGCCGCTCGTACGCTGATTGCCATC
ACTTTTCCCTGGCCCTCGAGTTTCCAACACAGGTAAAGAGCAGGCGTATAGAACATAAGG
GGTATTTGAATCGTGTAAGATGGCCATCATCCGGAGCCTTGCGCGCCCAGGTCTTATCGA
AGAATATAGGTTATCGAATCCTGCACTTGTTACGAACCTGGGCTCAGGAGTCACAGAAGT
TCCATGATTCAGTTCGTCATACGTCCAGCCAGCAACAGAAAAACAGTA
'''

fa_li = fasta.split(">")

max_gc = 0
max_gcID = ''
for fa in fa_li[1:]:
        fa_items = fa.split("\n")
        seq_name = fa_items[0]
        seq = "".join(fa_items[1:]).rstrip()
        seq_len = len(seq)
        gc_count = 0
        for nt in seq:
                if nt == "C":
                        gc_count += 1
                if nt == "G":
                        gc_count += 1
        gc_content = (gc_count/seq_len)*100
        if gc_content > max_gc:
                max_gc = gc_content
                max_gcID = seq_name

print(max_gcID)
print(max_gc)




#  6 find a motif  in 
s = 'ATAGCAGGACTATAAGCAGGAGAAGATACCCGAGCAGGATGGGCAGCAGGATAAGCAGGAAGCAGGACAGCAGGAAGCAGGAACGACTAAGCAGGACTATTTAGCAGGAAGAGGAGCAGGATAGCAGGAAGCAGGACAGCAGGAAGCAGGAACCAGCAGGAAGGCTAAGTTAGCAGGATCAAAGAGCAGGAACACGAGCAGGACCAGCAGGACCAAGGCAGCAGGAAGCAGGAAGCAGGAGAAGCAGGACTCAATAGCAGGAAGCAGGAGAGCAGGAGGCCCAGCAGGACTAGCAGGATAGGGAGCAGGATGGGTGAGCAGGAAGCAGGAAGCAGGACGGAGCAGGAGCAGCAGGATAATTAGCAGGAAAAGCAGGACCTGAGCAGGAAGCAGGACAAAGCAGGAAGCAGGATAGCAGGAAGCAGGACAGCAGGAAGCAGGAAGCAGGAAAGCAGGAATCAGCAGGAAGCAGGAAAGCAGGATTCCAGCAGGACGGCTCTTGTGCAGCAGGACAGCAGGAGAGCAGGAAGCAGGACCAGCAGGAATTAGCAGGAGTCTTTGCGGGGACAGCAGGAGCGAGCAGGACAAAGTTAGCAGGATAGCAGGAAGCAGGAAGCAGGATAGCAGGAAAGCAGGAGAGCAGGAAGCAGGACAGCAGGACTTAGCAGGAAGCAGGAATAGCAGGATAGCAGGAAGCAGGAAAGCAGGAAGGAGCAGGAACGCGCAAGCAGGACAGCAGGAGATAGCAGGAAAAAGCAGGAATAAGCAGGAAGCAGGACAGCAGGAGAGCAGGAAGCAGGAAGCAGAGCAGGACCCGATAGCAGGATTAGCAGGATAGCAGGAGTAAGCAGGACAGCAGGAAGCAGGATACAATTAGCAGGAGCAGCAGGAAGCAGGAGTAGCAGGAGTTAGCAGGAAAGCAGGA'
t = 'AGCAGGAAG'
for position in range(len(s)):
    if s[position:].startswith(t):
        print(position+1) 



# 7 indipendent alleles

from math import factorial
k = 6
N = 19
total = 2**k
prob_AaBb = 0.25
def binomial(n, total):
    return factorial(total)/(factorial(n)*factorial(total - n)) * prob_AaBb**n * (1 - prob_AaBb)**(total - n)
print(round(1 - sum([binomial(n, total) for n in range(N)]),3))


# 8 calculating expected offspring

AA_AA = 19442 
AA_Aa =  17999 
AA_aa =  16054 
Aa_Aa = 16717 
Aa_aa =  16195 
aa_aa = 16470

p1 = 1
p2 = 1
p3 = 1
p4 = 0.75
p5 = 0.5
p6 = 0

expected = 2*(AA_AA*p1 + AA_Aa*p2 + AA_aa*p3 + Aa_Aa*p4 + Aa_aa*p5 + aa_aa*p6)
print(expected)

# 9 consensus and profile
def Consensus(DNAs):
    profile = []
    for i in range(len(DNAs[0])):
        A,C,T,G = 0, 0, 0, 0
        for j in range(len(DNAs)):
            if DNAs[j][i] == 'A':
                A += 1
            elif DNAs[j][i] == 'C':
                C += 1
            elif DNAs[j][i] == 'T':
                T += 1
            elif DNAs[j][i] == 'G':
                G += 1
        profile.append([[A,'A'],[C,'C'],[G,'G'],[T,'T']])

    consensus = ''
    for row in profile:
        common = max(row)
        consensus += common[1]
    print(consensus)
    for i in range(4):
        record = profile[0][i][1] + ': '
        for j in range(len(profile)):
            record += str(profile[j][i][0]) + ' '
        print(record)



with open('C:\\Users\\ASUS\\OneDrive\\Desktop\\Hacker\\rosalind_cons (5).txt','r') as file:
    content = file.read()
DNAs_number, lines, line_number, DNAs = content.count('>'), content.splitlines(), 0, []
for i in range(DNAs_number):
    DNA = ''
    line_number += 1
    while lines[line_number][0] != '>':
        DNA += lines[line_number]
        line_number += 1
        if line_number+1 > len(lines):
            break
    DNAs.append(DNA)

Consensus(DNAs)

# 10 introduction to random strings 
import math

dataset = "GGACCGTTGAGAGACTGCCGGCCGCACGGTACGAAGGACGCTGGACAAACGTAGGCTATACTTAGTATCAAAGACCCGGTGCGTCCCCCACGG"

number_line = "0.057 0.140 0.169 0.230 0.283 0.337 0.402 0.435 0.481 0.567 0.616 0.641 0.712 0.783 0.813 0.860 0.906"
gcc = [float(i) for i in number_line.split()]


outputs = []
prob = 0
for a_gcc in gcc:
    prob = 0
    chances = {
        'A' : (1-a_gcc)/2,
        'C' : a_gcc/2,
        'G' : a_gcc/2,
        'T' : (1-a_gcc)/2
    }
    for c in dataset:
        prob = prob + math.log10(chances[c])
    outputs.append(prob)

print(" ".join([str(i) for i in outputs]))
