#mortal fibonacci rabbits
def MortalFibonacci(n, m):
    living = [1, 1]
    for i in range(2, n):
        # first reproduction
        tmp = living[i - 1] + living[i - 2]
        # then death
        if i == m:
            tmp = tmp - 1
        if i > m:
            tmp = tmp - living[i - m - 1]
        living.append(tmp)
    return living[-1]

# months/generations
n = 87
# survival time
m = 19

print(MortalFibonacci(n, m))

#rabbits and recurrence relations
def rabbits(n, k):
   if n == 0:
      return 0
   if n == 1:
      return 1
   else:
      return rabbits(n-1, k) + k*rabbits(n-2, k)
print (rabbits(34,2))

#Counting Point Mutations
seq1 = str(input())
seq2 = str(input())
mutation_count = 0
for i in range (len(seq1)):
    if seq1[i] != seq2[i] :
        mutation_count+=1
print(mutation_count)

#Translating RNA into Protein
coded = str(input())

string = """UUU F      CUU L      AUU I      GUU V
UUC F      CUC L      AUC I      GUC V
UUA L      CUA L      AUA I      GUA V
UUG L      CUG L      AUG M      GUG V
UCU S      CCU P      ACU T      GCU A
UCC S      CCC P      ACC T      GCC A
UCA S      CCA P      ACA T      GCA A
UCG S      CCG P      ACG T      GCG A
UAU Y      CAU H      AAU N      GAU D
UAC Y      CAC H      AAC N      GAC D
UAA Stop   CAA Q      AAA K      GAA E
UAG Stop   CAG Q      AAG K      GAG E
UGU C      CGU R      AGU S      GGU G
UGC C      CGC R      AGC S      GGC G
UGA Stop   CGA R      AGA R      GGA G
UGG W      CGG R      AGG R      GGG G"""

decoded = ''

traL =  string.split()
traDict = dict(zip(traL[0::2], traL[1::2]))

for i in range(0, len(coded)-3, 3):
    decoded += traDict[coded[i:i+3]]

print (decoded)



#calculating protein mass
mass_table = { "A" : 71.03711, "C" : 103.00919, "D" : 115.02694, "E" : 129.04259, "F" : 147.06841, "G" : 57.02146, "H" : 137.05891, "I" : 113.08406, "K" : 128.09496, "L" : 113.08406, "M" : 131.04049, "N" : 114.04293, "P" : 97.05276, "Q" : 128.05858, "R" : 156.10111, "S" : 87.03203, "T" : 101.04768, "V" : 99.06841, "W" : 186.07931, "Y" : 163.06333, }

aa_sequence = "LKMYSIKHPILIWDEDPGASFHQVDSDTKEAPTACYYLADNFFTIGQMFQIYIDQWMKEYATKMANNEFRANNMFYYTLTQQTGRCFTSDQTSKIEKSPVMFKGQSGFYTGMMWRWHIYHIDWTTVECCWDVCDRQLMASLKCWIFTFWANIINNQCHDYTIEIRLMGPWTCTPGMYCLQPNPDVPLQQMLEDKMPVDHMECEMLPTVRICIYWLHERKLVCWFRFFIHNPNCKRKLLLFFIACFLCQIAACEPAGDVRCGTPNCNCMRPCWMLTDLFFWRPPVVSKAMPIKNRHSCPNNGTLHEIASMTIGKSQISYIYHGNCRFLAYRMFNCLCMNQVQLHNHKCVASHFGLAMQVCCMNFYIVENWVAFFDQPSHECRMWQPEFAKAFDCWDPPWGNIRATWEVWWERKNDVFAIKICMFEDDGKMRSQHRQCGLAIPAIGTQNCGSIPKSYFRMHENHMHQFPLKLPDRGSMSQSAWQHMHNSFESRQATHNDDEYIAIPSQGFPGFWIFQVLCVPRMFCHMMLPMTQAVDACDEYWYAKKSGFYNLPVQIENAINFELHTQQKNYLAVCCQEIWQWPVDAQTHTFCIDHWNTLVRQSQTFWPSMVAIFKRKDNDFLYHQRQYYKNHEDRAPHQQLQGREWGFENYPNCCPQRGYLILYWMLGLRNKSCPLGFHSIQMPYSYWQTVITFLPLQGENLIHTIHCDVFHTNYNVWCYCSILMRSQYPYKCPHHSWLNRTKGEFIAPANKVERTAMKDMIPFYHTYMAIHNIFKILNFWLNWGFASQPTHFKNFQADSNVFKPMLPVMRRMYWRWHNRFVKIVHDGWFWCQQKQVVRYLFVEHSHYNHATTSSIGHHLPSMCTVGTIRWWMWQDSDWCFEYINTEECKCFPTMEIHFQDPKPLGTIKKVDHNGTWNDDTCRGPTHQDCVDFCFESMIKLTLMVPIAYVSMLWQ"

total_mass = 0

for aa in aa_sequence:
    total_mass += mass_table[aa]
print(round(total_mass,3))

#enumerating gene orders
def factorial(n):
	
	if n==1:
		return 1
	else:
		return n*factorial(n-1)

def all_num(n):
	ori = []
	for i in range(n):
		ori.append(i+1)
	return ori


def permutations(arr, position, end):
	if position == end:
		#print(arr)
		for i in arr:
			if i!=arr[-1]:
				print(i, end=' ')
			else:
				print(i, end='\n')

	else:
		for index in range(position, end):
			arr[index], arr[position] = arr[position], arr[index]
			permutations(arr, position+1, end)
			arr[index], arr[position] = arr[position], arr[index]


print(factorial(5))
ori = all_num(5)
permutations(ori, 0, len(ori))



#Enumerating k-mers Lexicographically
import itertools

def permcalculator(alphabet, n):
    """Prints all strings length n that can be formed from alphabet, ordered lexicographically"""

    perms = itertools.product(alphabet, repeat=n)

    for counter, perm in enumerate(list(perms)):
        permutation = ''
        for item in perm:
            permutation += str(item)
        print(permutation)


permcalculator("ABCDEFG", 3)



#inferring mrna from proteins
def mrna(j):
	cod = {'A': 4,'C': 2,'D': 2,'E': 2,'F': 2,'G': 4,'H': 2,'I': 3,'K': 2,'L': 6,'M': 1,'N': 2,'P': 4,'Q': 2,'R': 6,'S': 6,'T': 4,'V': 4,'W': 1,'Y': 2}
	rna = 1
	for i in j:
		rna = rna * cod[i]
	return 3*rna % 1000000


print (mrna('MRQSRNIMGYNYMYSRGFVSDNGHVTVSWHELPCELYKGGHYAMMSEHWGQMQGYVFNQPQVGLIMARSDACPFYASCKWRWNYTYYFLAVWHYMNLQRRIFLACDTVCNFPHFRGMNMQSMPNVEDWSHQYYVMNGAVSNGFAWCVCLEEAANKYFKKNFAFMMWQRYCDQPELPHTTQGMVIDNTHKFWNLNYEDDKCKFYWWWEKGGRFFQCVAKADMTTLNTNDIEQPPHTFYTHRQFWKLSVKWGMQAKTPRMMMQRQGEFVCGKSEVFHKTCAHNSSALHWDLEVSDHNHHLMPKVSLMPIHPGRQARPFDKLGCQVASPPRNHLIAKLTNEKAPTDTYMPVEHRIPFCIIGGWWLDITKCPIFSALKRTLQGQYHFCWATCWAYHQFELVQHFKGPQCANPPTVFVNVDLNDMRGEECCNHTLIKFRYWKLERQASVATPNICFWPIPSGAHLGYVKWCVGWCSQMCTEDHRYAGWYISMTQGKSVNHTSLGHFMYYMMWKELMIAPYRVGSNFCPASNLTGMFDVNGDPYWDTVGVGAMCNNMDHVVCFIHQLTIFAALTVNKEHIKFLPQRCRCCGQDTEATCCAAGWQLPGHGPCALSHWRQFKHLQHNMKHMPWYNNVILFMGSVHFAQGQCHINIMFSTNQSVPPFDRTWARTYDAYTEMLTNHDFCTPSEMQEQMPGAFPPMEWELPWTTQLGYGPMSHRRCPNMCWNHILKRKFPAQRLCFAVPAFANDTFHYEGQYVDMQWIYGIVHENCWIPQEMAHPLKIGKYSNMWTWQWSEWTLILNCNHPAQLKFCINDYMASDIDQHSLGDYIMCFGVMQHHTPTFVCQWYHRKLRKPRVVDNFTQKMSKIHYLSMAWFSRQIYIEFIVSNRPNAFKPIFDDTIKCMAVMPFMLYSWIHCSFEFEVEPMYANPADHHESTFTYWVFSKYEDDRFSHRQNINIGKYWSDEDMHAKWCFHTDARDWYYFDSRDICYDPIFWTQRRICP'))


#finding a shared motif
def find_lca(lst):
    lcas = set()
    last = lst.pop()
    for i in range(len(last)):
        common = True
        n = i
        while common:
            n += 1
            for dna in lst:
                if last[i:n] not in dna:
                    common = False
                    n -= 1
                    break
            if common is False or n > len(last):
                break
            lcas.add(last[i:n])

    lcas = list(lcas)
    return max(lcas,key=len)


with open('C:\\Users\\ASUS\\OneDrive\\Desktop\Hacker\\rosalind_lcsm (5).txt', 'r') as file:
    content = file.read()
DNAs_number, lines, line_number, DNAs = content.count('>'), content.splitlines(), 0, []
for i in range(DNAs_number):
    DNA = ''
    line_number += 1
    while lines[line_number][0] != '>':
        DNA += lines[line_number]
        line_number += 1
        if line_number+1 > len(lines):
            break
    DNAs.append(DNA)
print(find_lca(DNAs))
#locating restriction sites
def resteriction(DNA):
    result = []
    for nuc in range(len(DNA)-4):
        length = 3
        while length != 14:
            length += 1
            if (length + nuc) > len(DNA):
                continue
            reverse = DNA[nuc:nuc+length].replace('A', 't').replace('T', 'a').replace('C', 'g').replace('G', 'c')
            reverse = reverse.upper()
            relist = list(reverse)
            relist.reverse()
            reverse = ''.join(relist)
            if DNA[nuc:nuc+length] == reverse:
                result.append([nuc+1,length])
    for i in range(len(result)):
        seq = str(result[i][0]) + ' ' + str(result[i][1])
        print(seq)

with open('rosalind_revp2.txt','r') as file:
    content = file.read()
DNA = ''
for i in range(1,len(content.splitlines())):
    DNA += content.splitlines()[i]
resteriction(DNA)

#longest increasing subsequence
inp = input()
source = inp.split(' ')
data = [int(i) for i in source]

def subsequence(seq):
    if not seq:
        return seq

    M = [None] * len(seq)
    P = [None] * len(seq)
    L = 1
    M[0] = 0
    for i in range(1, len(seq)):
        lower = 0
        upper = L
        if seq[M[upper-1]] < seq[i]:
            j = upper
        else:
            while upper - lower > 1:
                mid = (upper + lower) // 2
                if seq[M[mid-1]] < seq[i]:
                    lower = mid
                else:
                    upper = mid
            j = lower

        P[i] = M[j-1]

        if j == L or seq[i] < seq[M[j]]:
            M[j] = i
            L = max(L, j+1)

    result = []
    pos = M[L-1]
    for _ in range(L):
        result.append(seq[pos])
        pos = P[pos]

    return result[::-1]
print (subsequence(data))
print (subsequence(data[::-1])[::-1])


